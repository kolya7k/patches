cat /etc/portage/patches/dev-libs/libfmt/pointers.patch
--- a/include/fmt/base.h        2024-12-12 19:50:06.000000000 +0300
+++ b/include/fmt/base.h        2024-12-12 23:31:02.040619529 +0300
@@ -1111,7 +1111,8 @@ struct use_format_as_member<
 template <typename T, typename U = remove_const_t<T>>
 using use_formatter =
     bool_constant<(std::is_class<T>::value || std::is_enum<T>::value ||
-                   std::is_union<T>::value || std::is_array<T>::value) &&
+                   std::is_union<T>::value || std::is_array<T>::value ||
+                  std::is_pointer<T>::value || std::is_member_pointer<T>::value) &&
                   !has_to_string_view<T>::value && !is_named_arg<T>::value &&
                   !use_format_as<T>::value && !use_format_as_member<T>::value>;

@@ -1168,9 +1169,6 @@ template <typename Char> struct type_map
   static auto map(volatile void*) -> const void*;
   static auto map(const volatile void*) -> const void*;
   static auto map(nullptr_t) -> const void*;
-  template <typename T, FMT_ENABLE_IF(std::is_pointer<T>::value ||
-                                      std::is_member_pointer<T>::value)>
-  static auto map(const T&) -> void;

   template <typename T, FMT_ENABLE_IF(use_format_as<T>::value)>
   static auto map(const T& x) -> decltype(map(format_as(x)));
@@ -2177,16 +2175,6 @@ template <typename Context> class value
       : pointer(const_cast<const void*>(x)) {}
   FMT_INLINE value(nullptr_t) : pointer(nullptr) {}

-  template <typename T, FMT_ENABLE_IF(std::is_pointer<T>::value ||
-                                      std::is_member_pointer<T>::value)>
-  value(const T&) {
-    // Formatting of arbitrary pointers is disallowed. If you want to format a
-    // pointer cast it to `void*` or `const void*`. In particular, this forbids
-    // formatting of `[const] volatile char*` printed as bool by iostreams.
-    static_assert(sizeof(T) == 0,
-                  "formatting of non-void pointers is disallowed");
-  }
-
   template <typename T, FMT_ENABLE_IF(use_format_as<T>::value)>
   value(const T& x) : value(format_as(x)) {}
   template <typename T, FMT_ENABLE_IF(use_format_as_member<T>::value)>
